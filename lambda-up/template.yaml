---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'up slack-bot setup'

Parameters:
  DBTableName:
    Description: 'DynamoDB table name'
    Type: String
    Default: 'standup'

Resources:
  FunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: UpbotFunc
    Properties:
      LogGroupName: !Sub '/aws/lambda/${UpbotFunc}'
      RetentionInDays: 7
  DynDBtable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref DBTableName
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      AttributeDefinitions:
        - AttributeName: 'Where'
          AttributeType: 'S'
        - AttributeName: 'Who'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'Where'
          KeyType: 'HASH'
        - AttributeName: 'Who'
          KeyType: 'RANGE'
  UpbotFunc:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda-up
      Runtime: go1.x
      CodeUri: .
      Description: "slack standup bot"
      MemorySize: 128
      Timeout: 15
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource:
                - !GetAtt 'DynDBtable.Arn'
            - Effect: Allow
              Action:
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                - "logs:DescribeLogStreams"
                - "logs:DescribeLogGroups"
              Resource: "arn:aws:logs:*:*:*"
            - Effect: Allow
              Action:
                - "kms:Decrypt"
              Resource: "arn:aws:kms:us-west-2:959815404593:key/*"
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /message
            Method: POST
      Environment:
        Variables:
          ENV: lambda
          kmsEncryptedToken: "AQICAHh423AFYImRphKjAn5NbUuA+nfDg025bX68TX19pdEh+AHTQ6AnlJiwx1tWpAk1ztf1AAAAdjB0BgkqhkiG9w0BBwagZzBlAgEAMGAGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMc/gL5rq8kCsJuYB1AgEQgDPz5CrcIJkFHjFh5Q67lIsYKB52DVfT6ji8fu5p6qQaG4Tji2sVW0v6E7HXHQneWxLMBz4="
          # testing token used with personal slack - eikenb
          #kmsEncryptedToken: "AQICAHh423AFYImRphKjAn5NbUuA+nfDg025bX68TX19pdEh+AGFcpnT4tYEdRH+Te633nwyAAAAdjB0BgkqhkiG9w0BBwagZzBlAgEAMGAGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMGfkVE+GRIflrMQycAgEQgDPiBUa2Mysl3Q2bWA923O3AnnOf1LPEIqXlFrnIp5rI/KyCcgmCmfULcX3VQbD95W5hlsE="
  # aws kms encrypt --output text --key-id alias/upbot --plaintext SECRET_TOKEN
  ApiLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - UpbotFunc
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpbotFunc
      Principal: apigateway.amazonaws.com
Outputs:
  GatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
