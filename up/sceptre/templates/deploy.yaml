---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'up slack-bot ASG setup'

# Note: For documentation on any of the resources, just google on the value of
# the Type: field. The AWS docs are usually one of the first hits.

Parameters:
  AmiId:
    Description: "Ami-id to use as host image"
    Type: String
  KeyName:
    Description: "Key pair for ssh access."
    Type: "AWS::EC2::KeyPair::KeyName"
  VpcId:
    Description: "Id of the VPC to run the ASG in."
    Type: "AWS::EC2::VPC::Id"
  Subnets:
    Description: "Subnets of VPC to run App in (should be 3, 1/AZ)"
    Type: "List<AWS::EC2::Subnet::Id>"
  ElbSubnets:
    Description: "Subnets of VPC to run ELB in (should be 3, 1/AZ)"
    Type: "List<AWS::EC2::Subnet::Id>"
  ElbScheme:
    Description: "internal or internet-facing LB"
    Type: String
    AllowedValues:
      - internal
      - internet-facing
    Default: "internet-facing"
  UserData:
    Description: "Userdata string (Base64 encoded)"
    Type: String

Resources:
  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow connections from specified CIDR ranges
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/8

  iamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                  - logs:PutRetentionPolicy
                  - logs:TagLogGroup
                  - ec2:DescribeTags
                Resource: "*"
  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref iamRole

  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: !Ref ElbScheme
      Subnets: !Ref ElbSubnets
      SecurityGroups:
        - !Ref securityGroup

  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckPort: 80
      HealthCheckPath: '/healthcheck'
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '60'

  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref loadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup

  launchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmiId
      SecurityGroups:
        - !Ref securityGroup
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      IamInstanceProfile: !Ref instanceProfile
      UserData:
        Ref: UserData

  serverGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName:
        Ref: launchConfig
      MinSize: '1'
      MaxSize: '1'
      TargetGroupARNs:
        - Ref: loadBalancerTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 60
      Cooldown: 30

Outputs:
  loadBalancerUrl:
    Value: !GetAtt loadBalancer.DNSName
